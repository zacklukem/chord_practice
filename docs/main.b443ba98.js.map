{"version":3,"sources":["main.ts"],"names":[],"mappings":";AAAA,IAEK,EAKA,EAkBA,EAzBC,EAAQ,CAAC,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,KA6B3E,SAAS,EAAS,GACR,OAAA,GACD,KAAA,EAAU,MACN,MAAA,CACL,UAAW,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC9B,WAAY,CAAC,EAAU,MAAO,EAAU,MAAO,EAAU,MACvD,EAAU,MAAO,EAAU,MAAO,EAAU,MAAO,EAAU,KAC/D,YAAa,CAAC,EAAY,MAAO,EAAY,MAAO,EAAY,MAC9D,EAAY,MAAO,EAAY,MAAO,EAAY,MAAO,EAAY,QAE3E,QACS,OAAA,EAAS,EAAU,QAIhC,SAAS,EAAc,EAAa,GAGb,IAFjB,IAAA,EAAa,GACb,EAAI,EAAM,QAAQ,GACD,EAAA,EAAA,EAAA,EAAM,UAAN,EAAA,EAAA,OAAA,IAAiB,CACpC,GADe,EAAA,GAEf,EAAW,KAAK,EAAM,EAAI,EAAM,SAE3B,OAAA,GAjDT,SAAK,GACH,EAAA,MAAA,OACA,EAAA,MAAA,IAFF,CAAK,IAAA,EAAW,KAKhB,SAAK,GACH,EAAA,MAAA,GACA,EAAA,MAAA,IACA,EAAA,IAAA,MAHF,CAAK,IAAA,EAAS,KAkBd,SAAK,GACH,EAAA,MAAA,QADF,CAAK,IAAA,EAAS,KA6Bd,IAAI,EAAY,GAEhB,SAAS,EAAe,GAClB,IAAA,EAAQ,EAAS,EAAQ,OACzB,EAAa,EAAc,EAAQ,aAAc,GACjD,EAAO,KAAK,MAAM,KAAK,SAAY,EAAW,QAC9C,EAAS,YACN,EAAW,GAAM,cAAa,qBAC1B,EAAM,WAAW,IACrB,EAAQ,QAAU,EAAM,YAAY,GAAQ,KAAG,WAElD,OAAA,IAAW,EACN,EAAe,IAEtB,EAAY,EACL,GAIX,SAAS,IACD,IAAA,EAAsB,SAAS,eAAe,iBAC9C,EACJ,SAAS,eAAe,iBACpB,EAAoB,SAAS,eAAe,cAC5C,EAAuC,SAAS,eAAe,gBAC/D,EAAuB,SAAS,eAAe,kBAC/C,EAAsB,SAAS,eAAe,iBAEpD,EAAqB,QAAU,WACzB,EAAoB,UAAU,SAAS,WACzC,EAAoB,UAAU,OAAO,WAErC,EAAoB,UAAU,IAAI,YAKtB,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAO,CAAd,IAAA,EAAG,EAAA,GACN,EAAS,SAAS,cAAc,UACpC,EAAO,aAAa,QAAS,GAC7B,EAAO,UAAY,EAAI,cACvB,EAAoB,YAAY,GAWlC,EAAkB,QAAU,WACtB,IAAA,EARG,CACL,aAAc,EAAoB,MAClC,MAAO,EAAU,MACjB,QAAS,EAAmB,SAM9B,EAAoB,UAAY,EAAe,IAKnD,OAAO,OAAS","file":"main.b443ba98.js","sourceRoot":"../src","sourcesContent":["const NOTES = ['c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'];\n\nenum SeventhType {\n  Major = 'maj7',\n  Minor = '7',\n}\n\nenum ChordType {\n  Major = '',\n  Minor = 'm',\n  Dim = 'dim',\n}\n\ninterface Options {\n  keySignature: string;\n  scale: ScaleType;\n  seventh: boolean;\n}\n\ninterface Scale {\n  intervals: number[],\n  chordTypes: ChordType[],\n  seventhType: SeventhType[],\n}\n\nenum ScaleType {\n  Major = \"MAJOR\",\n}\n\nfunction getScale(scale: ScaleType): Scale {\n  switch (scale) {\n    case ScaleType.Major:\n      return {\n        intervals: [0, 2, 2, 1, 2, 2, 2],\n        chordTypes: [ChordType.Major, ChordType.Minor, ChordType.Minor,\n          ChordType.Major, ChordType.Major, ChordType.Minor, ChordType.Dim],\n        seventhType: [SeventhType.Major, SeventhType.Minor, SeventhType.Minor,\n          SeventhType.Major, SeventhType.Minor, SeventhType.Minor, SeventhType.Minor]\n      };\n    default:\n      return getScale(ScaleType.Major);\n  }\n}\n\nfunction getScaleNotes(key: string, scale: Scale): string[] {\n  let scaleNotes = [];\n  let i = NOTES.indexOf(key);\n  for (let interval of scale.intervals) {\n    i += interval;\n    scaleNotes.push(NOTES[i % NOTES.length]);\n  }\n  return scaleNotes;\n}\n\nlet lastChord = \"\";\n\nfunction getRandomChord(options: Options): string {\n  let scale = getScale(options.scale);\n  let scaleNotes = getScaleNotes(options.keySignature, scale);\n  let root = Math.floor(Math.random() * (scaleNotes.length));\n  let output = `\n    <b>${scaleNotes[root].toUpperCase()}</b>\n    <small>${scale.chordTypes[root]\n      + (options.seventh ? scale.seventhType[root] : '')\n    }</small>`;\n  if (output === lastChord) {\n    return getRandomChord(options);\n  } else {\n    lastChord = output;\n    return output;\n  }\n}\n\nfunction main() {\n  const chordDisplayElement = document.getElementById(\"chord_display\");\n  const keySignatureElement: HTMLSelectElement =\n    document.getElementById(\"key_signature\") as HTMLSelectElement;\n  const nextButtonElement = document.getElementById(\"next_chord\");\n  const showSeventhElement: HTMLInputElement = document.getElementById(\"show_seventh\") as HTMLInputElement;\n  const optionsButtonElement = document.getElementById(\"options_button\");\n  const optionsPanelElement = document.getElementById(\"options_panel\");\n\n  optionsButtonElement.onclick = () => {\n    if (optionsPanelElement.classList.contains(\"visible\")) {\n      optionsPanelElement.classList.remove(\"visible\");\n    } else {\n      optionsPanelElement.classList.add(\"visible\");\n    }\n\n  }\n\n  for (let key of NOTES) {\n    let option = document.createElement('option');\n    option.setAttribute('value', key);\n    option.innerHTML = key.toUpperCase();\n    keySignatureElement.appendChild(option);\n  }\n\n  function generateOptions(): Options {\n    return {\n      keySignature: keySignatureElement.value,\n      scale: ScaleType.Major,\n      seventh: showSeventhElement.checked,\n    }\n  }\n\n  nextButtonElement.onclick = () => {\n    let options = generateOptions();\n    chordDisplayElement.innerHTML = getRandomChord(options);\n  }\n\n}\n\nwindow.onload = main;\n"]}